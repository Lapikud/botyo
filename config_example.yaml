# Facebook account credentials
account:
  email: FACEBOOK_EMAIL
  password: FACEBOOK_PASSWORD

mongo:
  url: "mongodb://mongo:27017/facebook-group-chat-bot"

# Threads to listen to
threads:
  - 162123511236172
  - 192123512310277:  # thread id
    aliases:
      - 4:            # facebook id of person
        - zuck
        - mark
        - zuckerberg
      - 5:
        - chris
        - hughes

app:
  stateFile: /data/app/appstate.json  # where to save the state of the Facebook chat API
  bannerFile: banner.txt              # file contents to print after listening has started
  commandEscape: "#"                  # character all commands to the bot should be preceded with (e.g. #ping)


modules:
  commands:
    # Returns the text aestheticized
    AestheticCommand:
      enable: true

    # Changes the chat color
    ColorCommand:
      enable: true

    # Returns the text emojified
    EmojifyCommand:
      enable: true

    # Makes the bot respond to pings
    PingCommand:
      enable: true

    # Generates a quote using Markov chains based on messages in the chat
    # Note: QuoteCommand uses messages cached in the database,
    #       so ThreadHistoryDownloader must be enabled for QuoteCommand to work correctly.
    QuoteCommand:
      enable: true
      maxMarkovSentenceWordCount: 20   # limit for the generated sentence's word count
      markovModelOrder: 2              # order of the Markov model

    # Returns the first few images found in Google Images matching the query
    ShowMeCommand:
      enable: false
      defaultImageCount: 1              # how many images to return
      maxImageCount: 10                 # max number of images to return
      cseId: CSE_ID                     # info how to obtain these:
      cseApiKey: CSE_API_KEY            # https://github.com/vdemedes/google-images

    # Returns some stats for the chat
    StatsCommand:
      enable: true

    # Runs a reverse image search on the last picture in the chat
    WhoDisCommand:
      enable: false
      recentMessagesCount: 50           # how many recent messages to search for photos
      googlApiKey: YOUR_GOOGL_API_KEY   # https://developers.google.com/url-shortener/v1/getting_started?csw=1#APIKey


  filters:
    # Emojifies parts of the message that are emojifiable (e.g. "E X A M P L E")
    AutoEmojifyFilter:
      enable: true

    # Saves a copy of each received message in the database
    MessageDownloaderFilter:
      enable: true

    # Replies "<name> is risen!" when a person on the watch list
    # sends a message for the first time in the last 'timeLimit' minutes or 'msgLimit' messages
    HeIsRisenFilter:
      enable: true
      timeLimit: 1080                   # how long the user must have been inactive (in minutes)
      msgLimit: 200                     # how many messages to look back on for the user
      watchEveryone: true               # whether to watch everyone in the chat
      watchList:                        # list of ids of people to watch; ignored if watchEveryone is true
        - USER_ID_1
        - USER_ID_2

  scheduled-tasks:
    # Checks for message requests and accepts them if they are coming from threadIds the bot is listening to
    MessageRequestAcceptor:
      enable: true
      executeOnStart: true
      interval: 300000      # 5*60*1000 ms = 5 min

    # Downloads the chat history and saves it into the database
    # Note: QuoteCommand uses messages cached in the database,
    #       so ThreadHistoryDownloader must be enabled for QuoteCommand to work correctly.
    ThreadHistoryDownloader:
      enable: true
      executeOnStart: true
      interval: 900000      # 15*60*1000 ms = 15 min

    # Updates the aliases for the participants in the chat room
    ThreadParticipantsUpdater:
      enable: true
      executeOnStart: true
      interval: 60000       # 1*60*1000 ms = 1 min